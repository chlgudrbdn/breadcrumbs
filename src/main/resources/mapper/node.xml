<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

 <mapper namespace="nodes">
 
   <!-- 해당 트리의 노드들 전체 출력 -->
<!--    <select id="node_of_tree_list" resultType="com.breadcrumbs.breadcrumbs.dto.NodeDto"> -->
<!--     mybatis 에서 반환 자료형 타입 속성은 resultType이다. -->
<!--     select * from node order by g_no desc -->
<!--    </select> -->

   <!-- 노드에 해당하는 코드 추출 -->
   <select id="read_node" parameterType="String"  resultType="com.breadcrumbs.breadcrumbs.dto.NodeDto">
     select * from node where id=#{id}
   </select>   

   <!-- 노드 추가 -->
   <insert id="add_node" parameterType="com.breadcrumbs.breadcrumbs.dto.NodeDto">
	    insert into node(id, parent, state, text, li_attr)
	    values(#{id}, #{parent, jdbcType=VARCHAR}, #{state}, #{text}, #{li_attr})
   </insert>
   <!-- 노드의 text를 수정(사전에 연관된 것도 수정했다고 가정.) -->
   <update id="update_node_name" parameterType="com.breadcrumbs.breadcrumbs.dto.NodeDto">
    update node set text=#{text} where id=#{id}
   </update>

<!-- 	트리와 노드 관계 추가 -->
   <insert id="add_t_n_relation" parameterType="com.breadcrumbs.breadcrumbs.dto.TreeNodeRelationDto">
	    insert into t_n_relation(tree_no, id)
	    values(#{tree_no}, #{id})
   </insert>
   
   <!-- 노드 1개 검색-->
   <select id="getNode" parameterType="String" resultType="com.breadcrumbs.breadcrumbs.dto.NodeDto">
    select * from node where id=#{id}
   </select>
   
      <!-- 루트 노드 검색-->
   <select id="getRootNode" parameterType="String" resultType="com.breadcrumbs.breadcrumbs.dto.NodeDto">
<!--     select * from node where id IN (select id from t_n_relation where tree_no=#{tree_no} ) and parent='#' -->
    select * from node where id IN (select id from t_n_relation where tree_no=#{tree_no} )
   </select>
   
   <!-- 해당 트리의 자식 노드 목록?-->
   <select id="nodeList" parameterType="String" resultType="com.breadcrumbs.breadcrumbs.dto.NodeDto">
<!--    <![CDATA[ -->
<!--      select * from node where id IN (select id from t_n_relation where tree_no=#{tree_no} ) -->
<!-- 	]]> -->
     select * from node where parent=#{id}
   </select>
   

   
   
   
   
   
      <!-- 유사한 카테고리 목록-->
   <select id="categoryList" parameterType="String" resultType="String">
     select * from category where category like '%' || #{value} || '%'
   </select>
   
         <!-- 해당 트리 카테고리 얻기 -->
   <select id="category_get" parameterType="String" resultType="String">
     select category from m_t_relation where tree_no=#{tree_no}
   </select>
   
         <!-- 카테고리 중복 확인-->
   <select id="category_chk" parameterType="String" resultType="String">
     select * from category where category = #{category}
   </select>
   
      <!-- 카테고리 추가 -->
<!--    <insert id="add_category" parameterType="com.breadcrumbs.breadcrumbs.dto.CategoryDto"> -->
   <insert id="add_category" parameterType="String">
	    insert into category values(#{category})
   </insert>
   
   
   <!-- 카테고리_선택지 관계 추가 -->
   <insert id="add_CategoryChoice" parameterType="com.breadcrumbs.breadcrumbs.dto.CategoryChoiceDto">
	    insert into c_c_relation(category, text, pre_choice, choice_pick_freq, choice_weight)
	    values(#{category}, #{text}, #{pre_choice, jdbcType=VARCHAR}, #{choice_pick_freq}, #{choice_weight})
   </insert>
      <!-- 카테고리_선택지 관계 중복여부확인 -->
   <select id="chkDuplicateCC" parameterType="com.breadcrumbs.breadcrumbs.dto.CategoryChoiceDto" resultType="com.breadcrumbs.breadcrumbs.dto.CategoryChoiceDto">
	    select * from c_c_relation
<!-- 	    (category, text, pre_choice, choice_pick_freq, choice_weight) -->
	    where category=#{category} and text = #{text}
	    	and pre_choice=#{pre_choice, jdbcType=VARCHAR} <!-- 이전 선택지와 같은 경우 -->
	    	
<!-- 	    values(#{category}, #{text}, #{pre_choice, jdbcType=VARCHAR}, #{choice_pick_freq}, #{choice_weight}) -->
   </select>
    <!-- 카테고리_선택지 관계 중복된 경우 choice_pick_freq 1증가-->
   <update id="updateCC" parameterType="com.breadcrumbs.breadcrumbs.dto.CategoryChoiceDto">
    update c_c_relation
    set choice_pick_freq=choice_pick_freq+1
    where category=#{category} and text = #{text}
	    	and pre_choice=#{pre_choice, jdbcType=VARCHAR} 
   </update>
   
   
   
   <!-- 선택지 중복 확인-->
   <select id="choice_chk" parameterType="String" resultType="String">
     select * from choice_list where text = #{text}
   </select>
   
   <!-- 선택지 추가 -->
   <insert id="add_choice" parameterType="com.breadcrumbs.breadcrumbs.dto.ChoiceListDto">
<!--    <insert id="add_choice" parameterType="String"> -->
	    insert into choice_list(text, code_piece) values(#{text}, #{code_piece})
   </insert>
      <!-- 선택지 중복 확인-->
   <select id="selectChoice" parameterType="String" resultType="String">
     select code_piece from choice_list where text = #{text}
   </select>
   
   
   
   
   <!-- 가장 마지막 tree_no 값 구하기 -->
   <select id="tree_max" resultType="int">
   SELECT LAST_NUMBER FROM USER_SEQUENCES WHERE SEQUENCE_NAME = 'TREE_NO_SEQ'
<!--    select tree_no_seq.currval from dual --> <!-- 첫 트리 생성시 오히려 방해된다. -->
<!--     select NVL (  max(tree_no), -1) from m_t_relation -->
   </select>   
   
    
   
   <!-- 댓글삭제 -->
<!--    <delete id="c_del" parameterType="int"> -->
<!--     delete from comment7 where comment_no=#{comment_no} -->
<!--    </delete> -->
   
   <!-- tree 저장 -->
   <insert id="tree_insert" parameterType="com.breadcrumbs.breadcrumbs.dto.MemberTreeRelationDto" >
    insert into m_t_relation(tree_no, recommend_cnt, category, email, dataFileName)
    values(tree_no_seq.nextval, 0 ,#{category},#{email},#{datafilename, jdbcType=VARCHAR})
   </insert>
   
   <select id="get_treeList" parameterType="String" resultType="com.breadcrumbs.breadcrumbs.dto.MemberTreeRelationDto">
     select * from m_t_relation where email =#{email}
   </select>

   
   <!-- 방명록 삭제 -->
<!--    <delete id="g_del" parameterType="int"> -->
<!--     delete from guest10 where g_no=#{g_no} -->
<!--    </delete> -->
 </mapper>
 
 
 
 
 
 
 
 
 
 
 
 
 
 